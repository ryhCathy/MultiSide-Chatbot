{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { createStore } from \"vuex\";\nconst store = createStore({\n  state: {\n    user: null,\n    sessions: [],\n    // {user, messages, unread}\n    current_session: null\n  },\n  mutations: {\n    SET_USER(state, user) {\n      state.user = user;\n    },\n    ADD_SESSION(state, user) {\n      state.sessions.push({\n        \"user\": user,\n        \"messages\": [],\n        // {content, date, self}\n        \"unread\": 0\n      });\n    },\n    DELETE_SESSION(state, user) {\n      for (let index = 0; index < state.sessions.length; index++) {\n        let session = state.sessions[index];\n        if (session.user.sid == user.sid) {\n          state.sessions.splice(index, 1);\n          if (state.current_session.user.sid == session.user.sid) {\n            state.current_session = null;\n          }\n          break;\n        }\n      }\n    },\n    SET_SESSIONS(state, users) {\n      const sessions = [];\n      for (let user of users) {\n        sessions.push({\n          \"user\": user,\n          \"messages\": [],\n          \"unread\": 0\n        });\n      }\n      state.sessions = sessions;\n    },\n    SET_CURRENT_SESSION(state, session) {\n      // the chat session clicked\n      session.unread = 0; // clear the unread icon\n      state.current_session = session;\n    },\n    SEND_MESSAGE(state, content) {\n      if (!state.current_session) {\n        // if refreshed, the original info will be cleared\n        return;\n      }\n      state.current_session.messages.push({\n        content: content,\n        date: new Date(),\n        self: true\n      });\n    },\n    RECEIVE_MESSAGE(state, data) {\n      const sid = data['sid'];\n      const content = data['content'];\n      let chat_session = null;\n      for (let session of state.sessions) {\n        if (session.user.sid == sid) {\n          chat_session = session;\n          break;\n        }\n      }\n      if (chat_session) {\n        chat_session.messages.push({\n          content: content,\n          date: new Date(),\n          self: false\n        });\n        if (!state.current_session || state.current_session.user.sid != chat_session.user.sid) {\n          chat_session.unread += 1;\n        }\n      }\n    }\n  },\n  getters: {\n    logined(state) {\n      return state.user ? true : false;\n    }\n  }\n});\nexport default store;","map":{"version":3,"names":["createStore","store","state","user","sessions","current_session","mutations","SET_USER","ADD_SESSION","push","DELETE_SESSION","index","length","session","sid","splice","SET_SESSIONS","users","SET_CURRENT_SESSION","unread","SEND_MESSAGE","content","messages","date","Date","self","RECEIVE_MESSAGE","data","chat_session","getters","logined"],"sources":["/Users/byc324/PycharmProjects/chat-client/src/store.js"],"sourcesContent":["import {createStore} from \"vuex\"\r\n\r\nconst store = createStore({\r\n\tstate: {\r\n\t\tuser: null,\r\n\t\tsessions: [], // {user, messages, unread}\r\n\t\tcurrent_session: null\r\n\t},\r\n\tmutations: {\r\n\t\tSET_USER(state, user){\r\n\t\t\tstate.user = user\r\n\t\t},\r\n\t\tADD_SESSION(state, user){\r\n\t\t\tstate.sessions.push({\r\n\t\t\t\t\"user\": user,\r\n\t\t\t\t\"messages\": [], // {content, date, self}\r\n\t\t\t\t\"unread\": 0\r\n\t\t\t})\r\n\t\t},\r\n\t\tDELETE_SESSION(state, user){\r\n\t\t\tfor(let index=0; index<state.sessions.length; index++){\r\n\t\t\t\tlet session = state.sessions[index];\r\n\t\t\t\tif(session.user.sid == user.sid){\r\n\t\t\t\t\tstate.sessions.splice(index, 1);\r\n\t\t\t\t\tif(state.current_session.user.sid == session.user.sid){\r\n\t\t\t\t\t\tstate.current_session = null;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\tSET_SESSIONS(state, users){\r\n\t\t\tconst sessions = []\r\n\t\t\tfor(let user of users){\r\n\t\t\t\tsessions.push({\r\n\t\t\t\t\t\"user\": user,\r\n\t\t\t\t\t\"messages\": [],\r\n\t\t\t\t\t\"unread\": 0\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\tstate.sessions = sessions;\r\n\t\t},\r\n\t\tSET_CURRENT_SESSION(state, session){ // the chat session clicked\r\n\t\t\tsession.unread = 0; // clear the unread icon\r\n\t\t\tstate.current_session = session;\r\n\t\t},\r\n\t\tSEND_MESSAGE(state, content){\r\n\t\t\tif(!state.current_session){ // if refreshed, the original info will be cleared\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tstate.current_session.messages.push({\r\n\t\t\t\tcontent: content,\r\n\t\t\t\tdate: (new Date()),\r\n\t\t\t\tself: true\r\n\t\t\t})\r\n\t\t},\r\n\t\tRECEIVE_MESSAGE(state, data){\r\n\t\t\tconst sid = data['sid']\r\n\t\t\tconst content = data['content']\r\n\t\t\tlet chat_session = null\r\n\t\t\tfor(let session of state.sessions){\r\n\t\t\t\tif(session.user.sid == sid){\r\n\t\t\t\t\tchat_session = session\r\n\t\t\t\t\tbreak\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(chat_session){\r\n\t\t\t\tchat_session.messages.push({\r\n\t\t\t\t\tcontent: content,\r\n\t\t\t\t\tdate: (new Date()),\r\n\t\t\t\t\tself: false\r\n\t\t\t\t})\r\n\t\t\t\tif(!state.current_session || \r\n\t\t\t\t\tstate.current_session.user.sid != chat_session.user.sid\r\n\t\t\t\t){\r\n\t\t\t\t\tchat_session.unread += 1\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\tgetters: {\r\n\t\tlogined(state){\r\n\t\t\treturn state.user?true:false;\r\n\t\t}\r\n\t}\r\n});\r\n\r\n\r\nexport default store;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}