{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ElMessage } from \"element-plus\";\nexport default {\n  name: \"LoginComponent\",\n  data() {\n    return {\n      form: {\n        username: \"\"\n      }\n    };\n  },\n  mounted() {},\n  methods: {\n    onSubmit() {\n      if (!this.form.username) {\n        ElMessage.error(\"Please enter your username\");\n        return;\n      } // now send by socket request instead of socket\n      // check if \n      // send the event of \"login\": emit\n      if (!this.$socket.connected) {\n        this.$socket.connect();\n      }\n      // this.$socket.emit(\"login\", {\"username\": this.form.username}, (result) => {\n      //   console.log(result);\n      // });\n      this.$socket.login(this.form.username, result => {\n        console.log(result);\n        if (result['code'] == 200) {\n          //console.log(\"get\")\n          const user = result['data']; // in pycharm backend: the data returned is just the username\n          //console.log(user['username'])\n          this.$chat.setUser(user);\n          this.$router.push({\n            'name': \"home\"\n          }); // direct to \"home\"\n        } else {\n          console.log(\"error\");\n          console.log(result['message']);\n          ElMessage.error(result['message']);\n        }\n      });\n    }\n  }\n};","map":{"version":3,"names":["ElMessage","name","data","form","username","mounted","methods","onSubmit","error","$socket","connected","connect","login","result","console","log","user","$chat","setUser","$router","push"],"sources":["/Users/byc324/PycharmProjects/chat-client/src/pages/Login.vue"],"sourcesContent":["<template>\n    <div class=\"login-container\">\n      <el-form ref=\"form\" :model=\"form\" class=\"login-main\">\n        <h1 class=\"h1_stylish\" >Online Chatbot</h1>\n        <el-form-item>\n          <el-input v-model=\"form.username\" placeholder=\"username\"></el-input>\n        </el-form-item>\n        <el-form-item style=\"text-align: right\">\n          <el-button type=\"primary\" @click=\"onSubmit\" style=\"font-family: 'Brush Script MT', cursive\">Login</el-button>\n        </el-form-item>\n      </el-form>\n    </div>\n  </template>\n  \n  <script>\n  import {ElMessage} from \"element-plus\";\n  export default {\n    name: \"LoginComponent\",\n    data() {\n      return {\n        form: {\n          username: \"\"\n        }\n      };\n    },\n    mounted() {\n  \n      },\n    methods: {\n        onSubmit() {\n            if(!this.form.username){\n                ElMessage.error(\"Please enter your username\");\n                   return;\n            } // now send by socket request instead of socket\n            // check if \n            // send the event of \"login\": emit\n            if(!this.$socket.connected){\n                this.$socket.connect();\n            }\n            // this.$socket.emit(\"login\", {\"username\": this.form.username}, (result) => {\n            //   console.log(result);\n            // });\n            this.$socket.login(this.form.username, (result) => {\n              console.log(result);\n              if(result['code'] == 200){\n                    //console.log(\"get\")\n                    const user = result['data']; // in pycharm backend: the data returned is just the username\n                    //console.log(user['username'])\n                    this.$chat.setUser(user);\n                    this.$router.push({'name': \"home\"}); // direct to \"home\"\n                } else {\n                    console.log(\"error\")\n                    console.log(result['message'])\n                    ElMessage.error(result['message']);\n                }\n            });\n        }\n    }\n  };\n  </script>\n  \n  <style scoped>\n  html,\n  body {\n    height: 100%;\n  }\n  .login-container {\n    width: 100vw;\n    height: 100vh;\n    background-image: url(\"../assets/login_bg.jpeg\");\n    background-size: cover;\n    background-color: rgba(0, 0, 0, 0.7); /* Set background color with opacity */\n    overflow: hidden;\n  }\n  \n  .login-container .login-main {\n    border-radius: 5px;\n    background-clip: padding-box;\n    margin: 280px auto;\n    width: 350px;\n    padding: 35px 35px 15px;\n    /* background: #F3B0C3; */\n    background: rgba(243, 176, 195, 0); /* Set fully transparent background color */\n    /* border: 1px solid #D4F0F0; */\n    /* -webkit-box-shadow: 0 0 25px #FFCCB6; */\n    /* box-shadow: 0 0 25px #F3B0C3; */\n  }\n\n  .h1_stylish {\n    text-align: center;\n    font-family: 'Brush Script MT', cursive;\n    font-size: 50px;\n    color: #8B4513;\n    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);\n  }\n\n  </style>\n  \n\n\n\n\n\n\n\n\n<!-- <template>\n    <div>\n        <h1>Login</h1>\n    </div>\n</template>  \n\n<script>\nexport default {\n    name: \"LoginComponent\"\n}\n</script>\n\n<style lang=\"\">\n\n</style> -->\n\n"],"mappings":";AAeE,SAAQA,SAAS,QAAO,cAAc;AACtC,eAAe;EACbC,IAAI,EAAE,gBAAgB;EACtBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,IAAI,EAAE;QACJC,QAAQ,EAAE;MACZ;IACF,CAAC;EACH,CAAC;EACDC,OAAOA,CAAA,EAAG,CAER,CAAC;EACHC,OAAO,EAAE;IACLC,QAAQA,CAAA,EAAG;MACP,IAAG,CAAC,IAAI,CAACJ,IAAI,CAACC,QAAQ,EAAC;QACnBJ,SAAS,CAACQ,KAAK,CAAC,4BAA4B,CAAC;QAC1C;MACP,EAAE;MACF;MACA;MACA,IAAG,CAAC,IAAI,CAACC,OAAO,CAACC,SAAS,EAAC;QACvB,IAAI,CAACD,OAAO,CAACE,OAAO,CAAC,CAAC;MAC1B;MACA;MACA;MACA;MACA,IAAI,CAACF,OAAO,CAACG,KAAK,CAAC,IAAI,CAACT,IAAI,CAACC,QAAQ,EAAGS,MAAM,IAAK;QACjDC,OAAO,CAACC,GAAG,CAACF,MAAM,CAAC;QACnB,IAAGA,MAAM,CAAC,MAAM,KAAK,GAAG,EAAC;UACnB;UACA,MAAMG,IAAG,GAAIH,MAAM,CAAC,MAAM,CAAC,EAAE;UAC7B;UACA,IAAI,CAACI,KAAK,CAACC,OAAO,CAACF,IAAI,CAAC;UACxB,IAAI,CAACG,OAAO,CAACC,IAAI,CAAC;YAAC,MAAM,EAAE;UAAM,CAAC,CAAC,EAAE;QACzC,OAAO;UACHN,OAAO,CAACC,GAAG,CAAC,OAAO;UACnBD,OAAO,CAACC,GAAG,CAACF,MAAM,CAAC,SAAS,CAAC;UAC7Bb,SAAS,CAACQ,KAAK,CAACK,MAAM,CAAC,SAAS,CAAC,CAAC;QACtC;MACJ,CAAC,CAAC;IACN;EACJ;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}